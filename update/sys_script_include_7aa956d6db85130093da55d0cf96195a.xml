<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_44813_sec_clsif.ClassificationValidator</api_name>
        <client_callable>true</client_callable>
        <description/>
        <name>ClassificationValidator</name>
        <script><![CDATA[var ClassificationValidator = Class.create();
(function(ClassificationValidator) {
    var $t = new x_44813_util.types();
    
    function ValidationProperty(config) {
        this.__config = config;
        this.__setLastValidatedString = "";
		this.sourceValue = "";
		this.normalizedValue = "";
		this.isValid = false;
        this.message = this.__config.emptyValueMsg;
        this.isChanged = function() { return __setLastValidatedString != this.sourceValue || typeof(this.isValid) != "boolean" || typeof(this.normalizedValue) != "string" ||
            typeof(this.message) != "string"; };
		this.toString = function() { return this.sourceValue; };
		this.validate = function(force) {
			this.sourceValue = $t.asString(this.sourceValue, "");
            this.__setLastValidatedString = this.sourceValue;
			if (!(force || this.isChanged()))
                return this.isValid;
            this.normalizedValue = this.sourceValue.trim();
			if (this.normalizedValue.length == 0) {
				this.isValid = false;
				this.message = this.__config.emptyValueMsg;
			} else {
				this.normalizedValue = $t.asNormalizedString(this.normalizedValue);
				this.isValid = this.__config.re.test(this.normalizedValue);
				if (this.isValid) {
					if (this.normalizedValue.length > this.__config.maxLen) {
						this.isValid = false;
						this.message = this.__config.valueTooLongMsg;
					} else
						this.message = (this.sourceValue == this.normalizedValue) ? "" : this.__config.valueNormalizedMsg;
				}
				else
					this.message = this.__config.invalidValueMsg;
            }
            return this.isValid;
		};
    }
    function NameValidationProperty() {
        ValidationProperty.call(this, {
            re: /^[a-z][a-z\d_]*(\s+[a-z][a-z\d_]*)*$/i,
            maxLen: 12,
            valueNormalizedMsg: "Classification Name has been normalized.",
            emptyValueMsg: NameValidationProperty.emptyValueMsg,
            valueTooLongMsg: "Name cannot be greater than 12 characters.",
            invalidValueMsg: "Invalid Classification Name."
        });
    }
    NameValidationProperty.prototype = ValidationProperty;
    NameValidationProperty.prototype.constructor = NameValidationProperty;
    NameValidationProperty.emptyValueMsg = "Classification Name cannot be empty.";
    function PortionMarkingValidationProperty() {
        ValidationProperty.call(this, {
            re: /^[a-z][a-z\d_.]?/i,
            maxLen: 2,
            valueNormalizedMsg: "Portion Marking has been normalized.",
            emptyValueMsg: PortionMarkingValidationProperty.emptyValueMsg,
            valueTooLongMsg: "Portion Marking can only be 1 or 2 characters.",
            invalidValueMsg: "Invalid Portion Marking."
        });
    }
    PortionMarkingValidationProperty.prototype = ValidationProperty;
    PortionMarkingValidationProperty.prototype.constructor = PortionMarkingValidationProperty;
    PortionMarkingValidationProperty.emptyValueMsg = "Portion Marking cannot be empty.";
    function asNameValidator(value) {
        if (!$t.isNil(value) && value instanceof NameValidationProperty)
            return value;
        var result = new NameValidationProperty();
        result.sourceValue = value;
        result.validate();
        return result;
    }
    function asPortionMarkingValidator(value){
        if (!$t.isNil(value) && value instanceof PortionMarkingValidationProperty)
            return value;
        var result = new PortionMarkingValidationProperty();
        result.sourceValue = value;
        result.validate();
        return result;
    }
	
	ClassificationValidator.prototype = {
		initialize: function() {
			this.name = new NameValidationProperty();
			this.portionMarking = new PortionMarkingValidationProperty();
			this.errorMessages = [ NameValidationProperty.emptyValueMsg, PortionMarkingValidationProperty.emptyValueMsg ];
			this.errorMessages = [];
			this.infoMessages = [];
			this.isValid = false;
		},
        isChanged: function() { return $t.isNil(this.name) || $t.isNil(this.portionMarking) ||
            !(this.name instanceof NameValidationProperty && this.portionMarking instanceof PortionMarkingValidationProperty) ||
            this.name.isChanged() || this.portionMarking.isChanged() || typeof(this.isValid) != "boolean"; },
		validate: function(force) {
			if (!(force || this.isChanged()))
                return this.isValid;
            this.name = asNameValidator(this.name);
            this.portionMarking = asPortionMarkingValidator(this.portionMarking);
            this.errorMessages = [];
            this.infoMessages = [];
            if (this.name.validate(force)) {
                this.isValid = this.portionMarking.validate(force);
                if (this.name.message.length > 0)
                    this.infoMessages.push(this.name.message);
                if (!this.isValid)
                    this.errorMessages.push(this.portionMarking.message);
                else if (this.portionMarking.message.length > 0)
                    this.infoMessages.push(this.portionMarking.message);
                return this.isValid;
            }
            this.errorMessages.push(this.name.message);
            if (!this.portionMarking.validate(force))
                this.errorMessages.push(this.portionMarking.message);
            else if (this.portionMarking.message.length > 0)
                this.infoMessages.push(this.portionMarking.message);
            this.isValid = false;
            return false;
		},
		set: function(name, portionMarking) {
            if (!$t.isNil(name) && name instanceof NameValidationProperty)
                this.name = name;
            else {
                if ($t.isNil(this.name) || !(this.name instanceof NameValidationProperty))
                this.name = new NameValidationProperty();
                this.name.sourceValue = name;
            }
            if (!$t.isNil(portionMarking) && portionMarking instanceof PortionMarkingValidationProperty)
                this.portionMarking = portionMarking;
            else {
                if ($t.isNil(this.portionMarking) || !(this.portionMarking instanceof PortionMarkingValidationProperty))
                this.portionMarking = new PortionMarkingValidationProperty();
                this.portionMarking.sourceValue = portionMarking;
            }
			return this.validate();
		},
		setFromGr: function(gr) { this.set(gr.getValue('name'), gr.getValue('portion_marking')); },
		applyGrIfValid: function(gr) {
			if (!this.validate() || (this.name.normalizedValue == gr.getValue('name') && this.portionMarking.normalizedValue == gr.getValue('portion_marking')))
				return false;
			
			gr.setValue('name', this.name.normalizedValue);
			gr.setValue('portion_marking', this.portionMarking.normalizedValue);
			return true;
		},
		setName: function(name) {
            if (!$t.isNil(name) && name instanceof NameValidationProperty)
                this.name = name;
            else {
                if ($t.isNil(this.name) || !(this.name instanceof NameValidationProperty))
                    this.name = new NameValidationProperty();
                this.name.sourceValue = name;
            }
			return this.name.validate();
		},
		setPortionMarking: function(portionMarking) {
            if (!$t.isNil(portionMarking) && portionMarking instanceof PortionMarkingValidationProperty)
                this.portionMarking = portionMarking;
            else {
                if ($t.isNil(this.portionMarking) || !(this.portionMarking instanceof PortionMarkingValidationProperty))
                    this.portionMarking = new PortionMarkingValidationProperty();
                this.portionMarking.sourceValue = portionMarking;
            }
			return this.portionMarking.validate();
		},
		type: 'ClassificationValidator'
	};
	ClassificationValidator.compliantClassifications = [
		{ name: 'UNCLASSIFIED', portion_marking: 'U' },
		{ name: 'CONFIDENTIAL', portion_marking: 'C' },
		{ name: 'RESTRICTED', portion_marking: 'R' },
		{ name: 'SECRET', portion_marking: 'S' },
		{ name: 'TOP SECRET', portion_marking: 'TS' }
	];
	ClassificationValidator.defaultByName = {};
	ClassificationValidator.defaultByPortionMarking = {};
	ClassificationValidator.compliantClassifications.forEach(function(a) {
		ClassificationValidator.defaultByName[a.name] = a.portion_marking;
		ClassificationValidator.defaultByPortionMarking[a.portion_marking] = a.name;
    });
    ClassificationValidator.$t.asString = $t.asString;
})(ClassificationValidator);]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-03-27 03:47:31</sys_created_on>
        <sys_id>7aa956d6db85130093da55d0cf96195a</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>ClassificationValidator</sys_name>
        <sys_package display_value="Security Classification" source="x_44813_sec_clsif">af37049adb41130093da55d0cf9619ef</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Security Classification">af37049adb41130093da55d0cf9619ef</sys_scope>
        <sys_update_name>sys_script_include_7aa956d6db85130093da55d0cf96195a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-03-28 17:51:21</sys_updated_on>
    </sys_script_include>
</record_update>
